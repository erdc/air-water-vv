MARIN
======

The problem consists of a 1m x 1m x 0.55m column of water, initially
at rest, that collapses under the action of gravity and impacts a
stationary object. The computational domain is a rectangular box with
dimensions 3.22m x 1m x 1m. The object has dimensions 0.161m x 0.161m
x 0.403m and is placed at the back end of the tank. The top of the
domain is closed. For more details, see runfiles or references.

Preprocessing
-------------

No postprocessing is necessary for running this case.  To be able to
run hexahedral elements the single-purpose marinMesh mesh-generator
needs to be compiled.  This is part of the mprans default build
sequence, so one can assume this utility is available.

The first lines of marin.py the discretion and formulation can be
chosen by modifying the following lines.

============================= =====================================================================================
  Parameter                        Description                                                                    
============================= =====================================================================================
  Refinement = 2               Controls the global level or refinement  e.g. 5 ==> 32x16x16                       
  spaceOrder = 1 / 2           Choose linear or quadratic elements                                                
  useHex     = True / False    Choose hexahedral or tetrahedral elements                                          
  useRBLES   = 0.0 / 1.0       Choose SUPG  (0.0) or RBLES/VMS (1.0) for stabilizing the Navier-Stokes equations  
  useMetrics = 0.0 / 1.0       Choose h-based (0.0) or metric based (1.0) numerical parameters                    
============================= =====================================================================================

Running
-------

The benchmark can be run using the following command:

::

  mpirun -n #NP parun marin_so.py -l 3 -v -O petsc.options -D lin_tet_3

where #NP stand for the number of processors. The final argument,
which specifies the output directory, is optional.  Or use one of the
run.#HOST.pbs run files.

Postprocessing
--------------

For extracting pointwise pressure and waterheights at certain location
in the tank 2 separate pvpython scripts are supplied in
$PROTEUS_MPRANS/scripts. To be able to run the scripts pvpython needs
to be installed. This is a special python shipped with
paraview. Furthermore, the scripts assumed there is one master xmf
file.  This master xmf file can be generated by running the following
command in the directory containing the xmf/h5 solution files.

::
    
  $PROTEUS/proteusModule/scripts/gatherArchives.py -s #NP -f marin_p  

This will generate a file marin_p_all#NP.xmf which can be used for
extracting pressures and heights by running the following commands in
the directory containing the xmf/h5 solution files.

::

  $PROTEUS_MPRANS/scripts/marinExtractPressure.py -f marin_p_all#NP.xmf
  $PROTEUS_MPRANS/scripts/marinExtractHeight.py   -f marin_p_all#NP.xmf

This will produce the files pressure.txt and height.txt that contain
the pressure and height time series.  The full experimental data is
provided exp_full.dat, while exp_height.dat and exp_pres.dat only
contain the relevant extracted form exp_full.dat.

For visualizing purposes it might be beneficial to repackage the
xmf/h5 solution files.  There are three distinct reasons/benefits to
do this:

1. The script allows skipping time steps and only extracts variable
deemed important, thereby greatly reducing the file size and hence the
time to copy data form remote location.

2. In the resulting solution files every time step has a distinct
solution file, which allows visualization of results while the
simulation is still running.

3. The scripts also outputs VTK files which allows visualization with
VisIt (and others).

Repackaging of the solution can be done by running the following
commands in the directory containing the xmf/h5 solution files.

::
  
  $PROTEUS_MPRANS/scripts/extractSolution.py -f ../marin_p -s #start -e #end -i #incr -n #NP  

where #start end #end are the begin and end timestep number and #incr
is a increment time step (aka stride) and #NP is again the number of
processors.

For convenience all the postprocesing mentioned above are lumped in a
simple script. This script can be run using following commands in the
directory containing the xmf/h5 solution files.

::

   postpro.sh


References
----------

- K.Kleefsman, G. Fekken, A. Veldman, B. Iwanowski, B. Bucher (2005) A volume-of-fluid based simulation method for wave impact problems, Journal of Computational Physics, 206, 363-393

- C.E. Kees, I. Akkerman, M. W. Farthing and Y. Bazilevs (2011) A
  Conservative Level Set Method for Variable-Order Approximations and
  Unstructured Meshes, Journal of Computational Physics, 230-12,
  3402-3414, doi:10.1016/j.jcp.2011.02.030

- I.Akkerman, Y. Bazilevs, C. E. Kees and M. W. Farthing (2011)
  Isogeometric Analysis of Free-Surface Flow Journal of Computational
  Physics, 230-11, 4137-4152, doi:10.1016/j.jcp.2010.11.044


